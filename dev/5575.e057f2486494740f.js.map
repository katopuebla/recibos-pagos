{"version":3,"file":"5575.e057f2486494740f.js","mappings":"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","names":["Picker","constructor","hostRef","registerInstance","this","ionInputModeChange","createEvent","useInputMode","isInHighlightBounds","ev","highlightEl","bbox","getBoundingClientRect","outsideX","clientX","left","right","outsideY","clientY","top","bottom","onFocusOut","relatedTarget","tagName","inputEl","exitInputMode","onFocusIn","target","actionOnClick","columnEl","numericInput","enterInputMode","onClick","undefined","onPointerDown","inputModeColumn","el","querySelectorAll","length","focusInput","querySelector","destroyKeypressListener","focus","addEventListener","onKeyPress","removeEventListener","emitInputModeChange","parsedValue","parseInt","key","Number","isNaN","value","onInputChange","selectSingleColumn","singleColumnSearchTimeout","options","Array","from","filter","disabled","clearTimeout","setTimeout","startIndex","newString","substring","findItemFromCompleteValue","find","textContent","replace","setValue","changedCharacter","searchColumn","colEl","zeroBehavior","behavior","option","selectMultiColumn","numericPickers","col","firstColumn","lastColumn","minuteValue","firstCharacter","firstCharacterAgain","firstCharacterAgainAgain","minuteValueAgain","emit","preventTouchStartPropagation","stopPropagation","componentWillLoad","getElementRoot","_this","_asyncToGenerator","blur","render","h","Host","tabindex","inputmode","type","onKeyDown","_a","ref","onInput","onBlur","class","getElement","style","ios","md"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/@ionic/core/dist/esm/ion-picker.entry.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, d as createEvent, h, f as Host, i as getElement } from './index-28849c61.js';\nimport { g as getElementRoot } from './helpers-da915de8.js';\n\nconst pickerIosCss = \":host{display:-ms-flexbox;display:flex;position:relative;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;width:100%;height:200px;direction:ltr;z-index:0}:host .picker-before,:host .picker-after{position:absolute;width:100%;-webkit-transform:translateZ(0);transform:translateZ(0);z-index:1;pointer-events:none}:host .picker-before{top:0;height:83px}:host .picker-before{inset-inline-start:0}:host .picker-after{top:116px;height:84px}:host .picker-after{inset-inline-start:0}:host .picker-highlight{border-radius:var(--highlight-border-radius, 8px);left:0;right:0;top:50%;bottom:0;-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto;margin-top:0;margin-bottom:0;position:absolute;width:calc(100% - 16px);height:34px;-webkit-transform:translateY(-50%);transform:translateY(-50%);background:var(--highlight-background);z-index:-1}:host input{position:absolute;top:0;left:0;right:0;bottom:0;width:100%;height:100%;margin:0;padding:0;border:0;outline:0;clip:rect(0 0 0 0);opacity:0;overflow:hidden;-webkit-appearance:none;-moz-appearance:none}:host ::slotted(ion-picker-column:first-of-type){text-align:start}:host ::slotted(ion-picker-column:last-of-type){text-align:end}:host ::slotted(ion-picker-column:only-child){text-align:center}:host .picker-before{background:-webkit-gradient(linear, left top, left bottom, color-stop(20%, rgba(var(--fade-background-rgb, var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255))), 1)), to(rgba(var(--fade-background-rgb, var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255))), 0.8)));background:linear-gradient(to bottom, rgba(var(--fade-background-rgb, var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255))), 1) 20%, rgba(var(--fade-background-rgb, var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255))), 0.8) 100%)}:host .picker-after{background:-webkit-gradient(linear, left bottom, left top, color-stop(20%, rgba(var(--fade-background-rgb, var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255))), 1)), to(rgba(var(--fade-background-rgb, var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255))), 0.8)));background:linear-gradient(to top, rgba(var(--fade-background-rgb, var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255))), 1) 20%, rgba(var(--fade-background-rgb, var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255))), 0.8) 100%)}:host .picker-highlight{background:var(--highlight-background, var(--ion-color-step-150, var(--ion-background-color-step-150, #eeeeef)))}\";\nconst IonPickerIosStyle0 = pickerIosCss;\n\nconst pickerMdCss = \":host{display:-ms-flexbox;display:flex;position:relative;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;width:100%;height:200px;direction:ltr;z-index:0}:host .picker-before,:host .picker-after{position:absolute;width:100%;-webkit-transform:translateZ(0);transform:translateZ(0);z-index:1;pointer-events:none}:host .picker-before{top:0;height:83px}:host .picker-before{inset-inline-start:0}:host .picker-after{top:116px;height:84px}:host .picker-after{inset-inline-start:0}:host .picker-highlight{border-radius:var(--highlight-border-radius, 8px);left:0;right:0;top:50%;bottom:0;-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto;margin-top:0;margin-bottom:0;position:absolute;width:calc(100% - 16px);height:34px;-webkit-transform:translateY(-50%);transform:translateY(-50%);background:var(--highlight-background);z-index:-1}:host input{position:absolute;top:0;left:0;right:0;bottom:0;width:100%;height:100%;margin:0;padding:0;border:0;outline:0;clip:rect(0 0 0 0);opacity:0;overflow:hidden;-webkit-appearance:none;-moz-appearance:none}:host ::slotted(ion-picker-column:first-of-type){text-align:start}:host ::slotted(ion-picker-column:last-of-type){text-align:end}:host ::slotted(ion-picker-column:only-child){text-align:center}:host .picker-before{background:-webkit-gradient(linear, left top, left bottom, color-stop(20%, rgba(var(--fade-background-rgb, var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255))), 1)), color-stop(90%, rgba(var(--fade-background-rgb, var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255))), 0)));background:linear-gradient(to bottom, rgba(var(--fade-background-rgb, var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255))), 1) 20%, rgba(var(--fade-background-rgb, var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255))), 0) 90%)}:host .picker-after{background:-webkit-gradient(linear, left bottom, left top, color-stop(30%, rgba(var(--fade-background-rgb, var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255))), 1)), color-stop(90%, rgba(var(--fade-background-rgb, var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255))), 0)));background:linear-gradient(to top, rgba(var(--fade-background-rgb, var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255))), 1) 30%, rgba(var(--fade-background-rgb, var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255))), 0) 90%)}\";\nconst IonPickerMdStyle0 = pickerMdCss;\n\nconst Picker = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.ionInputModeChange = createEvent(this, \"ionInputModeChange\", 7);\n        this.useInputMode = false;\n        this.isInHighlightBounds = (ev) => {\n            const { highlightEl } = this;\n            if (!highlightEl) {\n                return false;\n            }\n            const bbox = highlightEl.getBoundingClientRect();\n            /**\n             * Check to see if the user clicked\n             * outside the bounds of the highlight.\n             */\n            const outsideX = ev.clientX < bbox.left || ev.clientX > bbox.right;\n            const outsideY = ev.clientY < bbox.top || ev.clientY > bbox.bottom;\n            if (outsideX || outsideY) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * If we are no longer focused\n         * on a picker column, then we should\n         * exit input mode. An exception is made\n         * for the input in the picker since having\n         * that focused means we are still in input mode.\n         */\n        this.onFocusOut = (ev) => {\n            // TODO(FW-2832): type\n            const { relatedTarget } = ev;\n            if (!relatedTarget || (relatedTarget.tagName !== 'ION-PICKER-COLUMN' && relatedTarget !== this.inputEl)) {\n                this.exitInputMode();\n            }\n        };\n        /**\n         * When picker columns receive focus\n         * the parent picker needs to determine\n         * whether to enter/exit input mode.\n         */\n        this.onFocusIn = (ev) => {\n            // TODO(FW-2832): type\n            const { target } = ev;\n            /**\n             * Due to browser differences in how/when focus\n             * is dispatched on certain elements, we need to\n             * make sure that this function only ever runs when\n             * focusing a picker column.\n             */\n            if (target.tagName !== 'ION-PICKER-COLUMN') {\n                return;\n            }\n            /**\n             * If we have actionOnClick\n             * then this means the user focused\n             * a picker column via mouse or\n             * touch (i.e. a PointerEvent). As a result,\n             * we should not enter/exit input mode\n             * until the click event has fired, which happens\n             * after the `focusin` event.\n             *\n             * Otherwise, the user likely focused\n             * the column using their keyboard and\n             * we should enter/exit input mode automatically.\n             */\n            if (!this.actionOnClick) {\n                const columnEl = target;\n                const allowInput = columnEl.numericInput;\n                if (allowInput) {\n                    this.enterInputMode(columnEl, false);\n                }\n                else {\n                    this.exitInputMode();\n                }\n            }\n        };\n        /**\n         * On click we need to run an actionOnClick\n         * function that has been set in onPointerDown\n         * so that we enter/exit input mode correctly.\n         */\n        this.onClick = () => {\n            const { actionOnClick } = this;\n            if (actionOnClick) {\n                actionOnClick();\n                this.actionOnClick = undefined;\n            }\n        };\n        /**\n         * Clicking a column also focuses the column on\n         * certain browsers, so we use onPointerDown\n         * to tell the onFocusIn function that users\n         * are trying to click the column rather than\n         * focus the column using the keyboard. When the\n         * user completes the click, the onClick function\n         * runs and runs the actionOnClick callback.\n         */\n        this.onPointerDown = (ev) => {\n            const { useInputMode, inputModeColumn, el } = this;\n            if (this.isInHighlightBounds(ev)) {\n                /**\n                 * If we were already in\n                 * input mode, then we should determine\n                 * if we tapped a particular column and\n                 * should switch to input mode for\n                 * that specific column.\n                 */\n                if (useInputMode) {\n                    /**\n                     * If we tapped a picker column\n                     * then we should either switch to input\n                     * mode for that column or all columns.\n                     * Otherwise we should exit input mode\n                     * since we just tapped the highlight and\n                     * not a column.\n                     */\n                    if (ev.target.tagName === 'ION-PICKER-COLUMN') {\n                        /**\n                         * If user taps 2 different columns\n                         * then we should just switch to input mode\n                         * for the new column rather than switching to\n                         * input mode for all columns.\n                         */\n                        if (inputModeColumn && inputModeColumn === ev.target) {\n                            this.actionOnClick = () => {\n                                this.enterInputMode();\n                            };\n                        }\n                        else {\n                            this.actionOnClick = () => {\n                                this.enterInputMode(ev.target);\n                            };\n                        }\n                    }\n                    else {\n                        this.actionOnClick = () => {\n                            this.exitInputMode();\n                        };\n                    }\n                    /**\n                     * If we were not already in\n                     * input mode, then we should\n                     * enter input mode for all columns.\n                     */\n                }\n                else {\n                    /**\n                     * If there is only 1 numeric input column\n                     * then we should skip multi column input.\n                     */\n                    const columns = el.querySelectorAll('ion-picker-column.picker-column-numeric-input');\n                    const columnEl = columns.length === 1 ? ev.target : undefined;\n                    this.actionOnClick = () => {\n                        this.enterInputMode(columnEl);\n                    };\n                }\n                return;\n            }\n            this.actionOnClick = () => {\n                this.exitInputMode();\n            };\n        };\n        /**\n         * Enters input mode to allow\n         * for text entry of numeric values.\n         * If on mobile, we focus a hidden input\n         * field so that the on screen keyboard\n         * is brought up. When tabbing using a\n         * keyboard, picker columns receive an outline\n         * to indicate they are focused. As a result,\n         * we should not focus the hidden input as it\n         * would cause the outline to go away, preventing\n         * users from having any visual indication of which\n         * column is focused.\n         */\n        this.enterInputMode = (columnEl, focusInput = true) => {\n            const { inputEl, el } = this;\n            if (!inputEl) {\n                return;\n            }\n            /**\n             * Only active input mode if there is at\n             * least one column that accepts numeric input.\n             */\n            const hasInputColumn = el.querySelector('ion-picker-column.picker-column-numeric-input');\n            if (!hasInputColumn) {\n                return;\n            }\n            /**\n             * If columnEl is undefined then\n             * it is assumed that all numeric pickers\n             * are eligible for text entry.\n             * (i.e. hour and minute columns)\n             */\n            this.useInputMode = true;\n            this.inputModeColumn = columnEl;\n            /**\n             * Users with a keyboard and mouse can\n             * activate input mode where the input is\n             * focused as well as when it is not focused,\n             * so we need to make sure we clean up any\n             * old listeners.\n             */\n            if (focusInput) {\n                if (this.destroyKeypressListener) {\n                    this.destroyKeypressListener();\n                    this.destroyKeypressListener = undefined;\n                }\n                inputEl.focus();\n            }\n            else {\n                // TODO FW-5900 Use keydown instead\n                el.addEventListener('keypress', this.onKeyPress);\n                this.destroyKeypressListener = () => {\n                    el.removeEventListener('keypress', this.onKeyPress);\n                };\n            }\n            this.emitInputModeChange();\n        };\n        this.onKeyPress = (ev) => {\n            const { inputEl } = this;\n            if (!inputEl) {\n                return;\n            }\n            const parsedValue = parseInt(ev.key, 10);\n            /**\n             * Only numbers should be allowed\n             */\n            if (!Number.isNaN(parsedValue)) {\n                inputEl.value += ev.key;\n                this.onInputChange();\n            }\n        };\n        this.selectSingleColumn = () => {\n            const { inputEl, inputModeColumn, singleColumnSearchTimeout } = this;\n            if (!inputEl || !inputModeColumn) {\n                return;\n            }\n            const options = Array.from(inputModeColumn.querySelectorAll('ion-picker-column-option')).filter((el) => el.disabled !== true);\n            /**\n             * If users pause for a bit, the search\n             * value should be reset similar to how a\n             * <select> behaves. So typing \"34\", waiting,\n             * then typing \"5\" should select \"05\".\n             */\n            if (singleColumnSearchTimeout) {\n                clearTimeout(singleColumnSearchTimeout);\n            }\n            this.singleColumnSearchTimeout = setTimeout(() => {\n                inputEl.value = '';\n                this.singleColumnSearchTimeout = undefined;\n            }, 1000);\n            /**\n             * For values that are longer than 2 digits long\n             * we should shift the value over 1 character\n             * to the left. So typing \"456\" would result in \"56\".\n             * TODO: If we want to support more than just\n             * time entry, we should update this value to be\n             * the max length of all of the picker items.\n             */\n            if (inputEl.value.length >= 3) {\n                const startIndex = inputEl.value.length - 2;\n                const newString = inputEl.value.substring(startIndex);\n                inputEl.value = newString;\n                this.selectSingleColumn();\n                return;\n            }\n            /**\n             * Checking the value of the input gets priority\n             * first. For example, if the value of the input\n             * is \"1\" and we entered \"2\", then the complete value\n             * is \"12\" and we should select hour 12.\n             *\n             * Regex removes any leading zeros from values like \"02\",\n             * but it keeps a single zero if there are only zeros in the string.\n             * 0+(?=[1-9]) --> Match 1 or more zeros that are followed by 1-9\n             * 0+(?=0$) --> Match 1 or more zeros that must be followed by one 0 and end.\n             */\n            const findItemFromCompleteValue = options.find(({ textContent }) => {\n                /**\n                 * Keyboard entry is currently only used inside of Datetime\n                 * where we guarantee textContent is set.\n                 * If we end up exposing this feature publicly we should revisit this assumption.\n                 */\n                const parsedText = textContent.replace(/^0+(?=[1-9])|0+(?=0$)/, '');\n                return parsedText === inputEl.value;\n            });\n            if (findItemFromCompleteValue) {\n                inputModeColumn.setValue(findItemFromCompleteValue.value);\n                return;\n            }\n            /**\n             * If we typed \"56\" to get minute 56, then typed \"7\",\n             * we should select \"07\" as \"567\" is not a valid minute.\n             */\n            if (inputEl.value.length === 2) {\n                const changedCharacter = inputEl.value.substring(inputEl.value.length - 1);\n                inputEl.value = changedCharacter;\n                this.selectSingleColumn();\n            }\n        };\n        /**\n         * Searches a list of column items for a particular\n         * value. This is currently used for numeric values.\n         * The zeroBehavior can be set to account for leading\n         * or trailing zeros when looking at the item text.\n         */\n        this.searchColumn = (colEl, value, zeroBehavior = 'start') => {\n            const behavior = zeroBehavior === 'start' ? /^0+/ : /0$/;\n            const option = Array.from(colEl.querySelectorAll('ion-picker-column-option')).find((el) => {\n                return el.disabled !== true && el.textContent.replace(behavior, '') === value;\n            });\n            if (option) {\n                colEl.setValue(option.value);\n            }\n        };\n        this.selectMultiColumn = () => {\n            const { inputEl, el } = this;\n            if (!inputEl) {\n                return;\n            }\n            const numericPickers = Array.from(el.querySelectorAll('ion-picker-column')).filter((col) => col.numericInput);\n            const firstColumn = numericPickers[0];\n            const lastColumn = numericPickers[1];\n            let value = inputEl.value;\n            let minuteValue;\n            switch (value.length) {\n                case 1:\n                    this.searchColumn(firstColumn, value);\n                    break;\n                case 2:\n                    /**\n                     * If the first character is `0` or `1` it is\n                     * possible that users are trying to type `09`\n                     * or `11` into the hour field, so we should look\n                     * at that first.\n                     */\n                    const firstCharacter = inputEl.value.substring(0, 1);\n                    value = firstCharacter === '0' || firstCharacter === '1' ? inputEl.value : firstCharacter;\n                    this.searchColumn(firstColumn, value);\n                    /**\n                     * If only checked the first value,\n                     * we can check the second value\n                     * for a match in the minutes column\n                     */\n                    if (value.length === 1) {\n                        minuteValue = inputEl.value.substring(inputEl.value.length - 1);\n                        this.searchColumn(lastColumn, minuteValue, 'end');\n                    }\n                    break;\n                case 3:\n                    /**\n                     * If the first character is `0` or `1` it is\n                     * possible that users are trying to type `09`\n                     * or `11` into the hour field, so we should look\n                     * at that first.\n                     */\n                    const firstCharacterAgain = inputEl.value.substring(0, 1);\n                    value =\n                        firstCharacterAgain === '0' || firstCharacterAgain === '1'\n                            ? inputEl.value.substring(0, 2)\n                            : firstCharacterAgain;\n                    this.searchColumn(firstColumn, value);\n                    /**\n                     * If only checked the first value,\n                     * we can check the second value\n                     * for a match in the minutes column\n                     */\n                    minuteValue = value.length === 1 ? inputEl.value.substring(1) : inputEl.value.substring(2);\n                    this.searchColumn(lastColumn, minuteValue, 'end');\n                    break;\n                case 4:\n                    /**\n                     * If the first character is `0` or `1` it is\n                     * possible that users are trying to type `09`\n                     * or `11` into the hour field, so we should look\n                     * at that first.\n                     */\n                    const firstCharacterAgainAgain = inputEl.value.substring(0, 1);\n                    value =\n                        firstCharacterAgainAgain === '0' || firstCharacterAgainAgain === '1'\n                            ? inputEl.value.substring(0, 2)\n                            : firstCharacterAgainAgain;\n                    this.searchColumn(firstColumn, value);\n                    /**\n                     * If only checked the first value,\n                     * we can check the second value\n                     * for a match in the minutes column\n                     */\n                    const minuteValueAgain = value.length === 1\n                        ? inputEl.value.substring(1, inputEl.value.length)\n                        : inputEl.value.substring(2, inputEl.value.length);\n                    this.searchColumn(lastColumn, minuteValueAgain, 'end');\n                    break;\n                default:\n                    const startIndex = inputEl.value.length - 4;\n                    const newString = inputEl.value.substring(startIndex);\n                    inputEl.value = newString;\n                    this.selectMultiColumn();\n                    break;\n            }\n        };\n        /**\n         * Searches the value of the active column\n         * to determine which value users are trying\n         * to select\n         */\n        this.onInputChange = () => {\n            const { useInputMode, inputEl, inputModeColumn } = this;\n            if (!useInputMode || !inputEl) {\n                return;\n            }\n            if (inputModeColumn) {\n                this.selectSingleColumn();\n            }\n            else {\n                this.selectMultiColumn();\n            }\n        };\n        /**\n         * Emit ionInputModeChange. Picker columns\n         * listen for this event to determine whether\n         * or not their column is \"active\" for text input.\n         */\n        this.emitInputModeChange = () => {\n            const { useInputMode, inputModeColumn } = this;\n            this.ionInputModeChange.emit({\n                useInputMode,\n                inputModeColumn,\n            });\n        };\n    }\n    /**\n     * When the picker is interacted with\n     * we need to prevent touchstart so other\n     * gestures do not fire. For example,\n     * scrolling on the wheel picker\n     * in ion-datetime should not cause\n     * a card modal to swipe to close.\n     */\n    preventTouchStartPropagation(ev) {\n        ev.stopPropagation();\n    }\n    componentWillLoad() {\n        getElementRoot(this.el).addEventListener('focusin', this.onFocusIn);\n        getElementRoot(this.el).addEventListener('focusout', this.onFocusOut);\n    }\n    /**\n     * @internal\n     * Exits text entry mode for the picker\n     * This method blurs the hidden input\n     * and cause the keyboard to dismiss.\n     */\n    async exitInputMode() {\n        const { inputEl, useInputMode } = this;\n        if (!useInputMode || !inputEl) {\n            return;\n        }\n        this.useInputMode = false;\n        this.inputModeColumn = undefined;\n        inputEl.blur();\n        inputEl.value = '';\n        if (this.destroyKeypressListener) {\n            this.destroyKeypressListener();\n            this.destroyKeypressListener = undefined;\n        }\n        this.emitInputModeChange();\n    }\n    render() {\n        return (h(Host, { key: 'f92214a09dc85b65873676f40fde2b802960e704', onPointerDown: (ev) => this.onPointerDown(ev), onClick: () => this.onClick() }, h(\"input\", { key: '6da37f75aca4ea1c9cb3bc733ebda2116279f313', \"aria-hidden\": \"true\", tabindex: -1, inputmode: \"numeric\", type: \"number\", onKeyDown: (ev) => {\n                var _a;\n                /**\n                 * The \"Enter\" key represents\n                 * the user submitting their time\n                 * selection, so we should blur the\n                 * input (and therefore close the keyboard)\n                 *\n                 * Updating the picker's state to no longer\n                 * be in input mode is handled in the onBlur\n                 * callback below.\n                 */\n                if (ev.key === 'Enter') {\n                    (_a = this.inputEl) === null || _a === void 0 ? void 0 : _a.blur();\n                }\n            }, ref: (el) => (this.inputEl = el), onInput: () => this.onInputChange(), onBlur: () => this.exitInputMode() }), h(\"div\", { key: '298e99d83dd3f5bf2798150bab0bb4024af472fa', class: \"picker-before\" }), h(\"div\", { key: 'ea578f04eb562a4dc6d6cc92de133dcb9fb7f42a', class: \"picker-after\" }), h(\"div\", { key: '84567824956dfe967992a629904836ba8b75b3ec', class: \"picker-highlight\", ref: (el) => (this.highlightEl = el) }), h(\"slot\", { key: 'df81f8fb90e1f649b608328034528f5c31c70c3b' })));\n    }\n    get el() { return getElement(this); }\n};\nPicker.style = {\n    ios: IonPickerIosStyle0,\n    md: IonPickerMdStyle0\n};\n\nexport { Picker as ion_picker };\n"],"x_google_ignoreList":[0]}