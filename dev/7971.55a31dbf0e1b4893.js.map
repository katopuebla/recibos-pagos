{"version":3,"file":"7971.55a31dbf0e1b4893.js","mappings":"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","names":["Route","constructor","hostRef","registerInstance","this","ionRouteDataChanged","createEvent","url","component","undefined","componentProps","beforeLeave","beforeEnter","onUpdate","newValue","emit","onComponentProps","oldValue","keys1","Object","keys","keys2","length","key","connectedCallback","watchers","RouteRedirect","ionRouteRedirectChanged","from","to","propDidChange","ROUTER_INTENT_NONE","ROUTER_INTENT_FORWARD","generatePath","segments","filter","s","join","writeSegments","history","root","useHash","direction","state","queryString","generateUrl","parsePath","pushState","replaceState","path","qsStart","indexOf","substring","split","map","trim","writeNavState","_ref","_asyncToGenerator","chain","index","changed","animation","outlet","searchNavNode","Promise","resolve","componentOnReady","route","result","setRouteId","id","params","element","markVisible","e","console","error","_x","_x2","_x3","_x4","apply","arguments","readNavState","_ref2","ids","node","getRouteId","push","_x5","OUTLET_SELECTOR","matches","querySelector","findRouteRedirect","redirects","find","redirect","matchesRedirect","i","expected","matchesIDs","len","Math","min","score","routeId","routeChain","toLowerCase","routeIdParams","pathWithParams","j","matchesSegments","inputSegments","RouterSegments","allparams","matchesDefault","chainSegments","segment","data","next","slice","mergeParams","a","b","assign","findChainForSegments","chains","match","bestScore","matchedChain","computePriority","level","pow","shift","readProp","el","prop","hasAttribute","getAttribute","readRedirects","Array","children","tagName","readRoutes","flattenRouterTree","readRouteNodes","nodes","flattenNode","child","Router","ionRouteWillChange","ionRouteDidChange","previousPath","busy","lastState","componentWillLoad","_this","document","body","window","addEventListener","once","canProceed","runGuards","getSegments","setSegments","writeNavStateRoot","onRoutesChanged","componentDidLoad","debounce","onRedirectChanged","bind","onPopState","_this2","historyDirection","onBackButton","ev","detail","register","processNextHandler","back","canTransition","_this3","_this4","_a","startsWith","currentPath","URL","pathname","search","parsedPath","waitPromise","printDebug","_this5","routes","group","forEach","r","debug","groupEnd","printRoutes","printRedirects","navChanged","_this6","warn","findChainForIDs","maxMatches","param","chainToSegments","safeWriteNavState","win","title","location","href","_this7","redirectFrom","toSegments","_this8","unlock","lock","_this9","p","_this10","fromChain","beforeLeaveHook","canLeave","toChain","beforeEnterHook","_this11","routeEvent","routeChangeEvent","readSegments","loc","prefix","hash","removePrefix","redirectFromSegments","redirectedFrom","getElement","RouterLink","onClick","openURL","routerDirection","routerAnimation","color","rel","target","render","mode","getIonMode","attrs","h","Host","class","createColorClasses","t","style","hostContext","selector","closest","cssClassMap","getClassMap","classes","getClassList","isArray","c","SCHEME","test","router","preventDefault"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/@ionic/core/dist/esm/ion-route_4.entry.js","./node_modules/@ionic/core/dist/esm/theme-01f3f29c.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, d as createEvent, i as getElement, h, f as Host } from './index-28849c61.js';\nimport { c as componentOnReady, o as debounce } from './helpers-da915de8.js';\nimport { o as openURL, c as createColorClasses } from './theme-01f3f29c.js';\nimport { b as getIonMode } from './ionic-global-c81d82ab.js';\n\nconst Route = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.ionRouteDataChanged = createEvent(this, \"ionRouteDataChanged\", 7);\n        this.url = '';\n        this.component = undefined;\n        this.componentProps = undefined;\n        this.beforeLeave = undefined;\n        this.beforeEnter = undefined;\n    }\n    onUpdate(newValue) {\n        this.ionRouteDataChanged.emit(newValue);\n    }\n    onComponentProps(newValue, oldValue) {\n        if (newValue === oldValue) {\n            return;\n        }\n        const keys1 = newValue ? Object.keys(newValue) : [];\n        const keys2 = oldValue ? Object.keys(oldValue) : [];\n        if (keys1.length !== keys2.length) {\n            this.onUpdate(newValue);\n            return;\n        }\n        for (const key of keys1) {\n            if (newValue[key] !== oldValue[key]) {\n                this.onUpdate(newValue);\n                return;\n            }\n        }\n    }\n    connectedCallback() {\n        this.ionRouteDataChanged.emit();\n    }\n    static get watchers() { return {\n        \"url\": [\"onUpdate\"],\n        \"component\": [\"onUpdate\"],\n        \"componentProps\": [\"onComponentProps\"]\n    }; }\n};\n\nconst RouteRedirect = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.ionRouteRedirectChanged = createEvent(this, \"ionRouteRedirectChanged\", 7);\n        this.from = undefined;\n        this.to = undefined;\n    }\n    propDidChange() {\n        this.ionRouteRedirectChanged.emit();\n    }\n    connectedCallback() {\n        this.ionRouteRedirectChanged.emit();\n    }\n    static get watchers() { return {\n        \"from\": [\"propDidChange\"],\n        \"to\": [\"propDidChange\"]\n    }; }\n};\n\nconst ROUTER_INTENT_NONE = 'root';\nconst ROUTER_INTENT_FORWARD = 'forward';\nconst ROUTER_INTENT_BACK = 'back';\n\n/** Join the non empty segments with \"/\". */\nconst generatePath = (segments) => {\n    const path = segments.filter((s) => s.length > 0).join('/');\n    return '/' + path;\n};\nconst generateUrl = (segments, useHash, queryString) => {\n    let url = generatePath(segments);\n    if (useHash) {\n        url = '#' + url;\n    }\n    if (queryString !== undefined) {\n        url += '?' + queryString;\n    }\n    return url;\n};\nconst writeSegments = (history, root, useHash, segments, direction, state, queryString) => {\n    const url = generateUrl([...parsePath(root).segments, ...segments], useHash, queryString);\n    if (direction === ROUTER_INTENT_FORWARD) {\n        history.pushState(state, '', url);\n    }\n    else {\n        history.replaceState(state, '', url);\n    }\n};\n/**\n * Transforms a chain to a list of segments.\n *\n * Notes:\n * - parameter segments of the form :param are replaced with their value,\n * - null is returned when a value is missing for any parameter segment.\n */\nconst chainToSegments = (chain) => {\n    const segments = [];\n    for (const route of chain) {\n        for (const segment of route.segments) {\n            if (segment[0] === ':') {\n                // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n                const param = route.params && route.params[segment.slice(1)];\n                if (!param) {\n                    return null;\n                }\n                segments.push(param);\n            }\n            else if (segment !== '') {\n                segments.push(segment);\n            }\n        }\n    }\n    return segments;\n};\n/**\n * Removes the prefix segments from the path segments.\n *\n * Return:\n * - null when the path segments do not start with the passed prefix,\n * - the path segments after the prefix otherwise.\n */\nconst removePrefix = (prefix, segments) => {\n    if (prefix.length > segments.length) {\n        return null;\n    }\n    if (prefix.length <= 1 && prefix[0] === '') {\n        return segments;\n    }\n    for (let i = 0; i < prefix.length; i++) {\n        if (prefix[i] !== segments[i]) {\n            return null;\n        }\n    }\n    if (segments.length === prefix.length) {\n        return [''];\n    }\n    return segments.slice(prefix.length);\n};\nconst readSegments = (loc, root, useHash) => {\n    const prefix = parsePath(root).segments;\n    const pathname = useHash ? loc.hash.slice(1) : loc.pathname;\n    const segments = parsePath(pathname).segments;\n    return removePrefix(prefix, segments);\n};\n/**\n * Parses the path to:\n * - segments an array of '/' separated parts,\n * - queryString (undefined when no query string).\n */\nconst parsePath = (path) => {\n    let segments = [''];\n    let queryString;\n    if (path != null) {\n        const qsStart = path.indexOf('?');\n        if (qsStart > -1) {\n            queryString = path.substring(qsStart + 1);\n            path = path.substring(0, qsStart);\n        }\n        segments = path\n            .split('/')\n            .map((s) => s.trim())\n            .filter((s) => s.length > 0);\n        if (segments.length === 0) {\n            segments = [''];\n        }\n    }\n    return { segments, queryString };\n};\n\nconst printRoutes = (routes) => {\n    console.group(`[ion-core] ROUTES[${routes.length}]`);\n    for (const chain of routes) {\n        const segments = [];\n        chain.forEach((r) => segments.push(...r.segments));\n        const ids = chain.map((r) => r.id);\n        console.debug(`%c ${generatePath(segments)}`, 'font-weight: bold; padding-left: 20px', '=>\\t', `(${ids.join(', ')})`);\n    }\n    console.groupEnd();\n};\nconst printRedirects = (redirects) => {\n    console.group(`[ion-core] REDIRECTS[${redirects.length}]`);\n    for (const redirect of redirects) {\n        if (redirect.to) {\n            console.debug('FROM: ', `$c ${generatePath(redirect.from)}`, 'font-weight: bold', ' TO: ', `$c ${generatePath(redirect.to.segments)}`, 'font-weight: bold');\n        }\n    }\n    console.groupEnd();\n};\n\n/**\n * Activates the passed route chain.\n *\n * There must be exactly one outlet per route entry in the chain.\n *\n * The methods calls setRouteId on each of the outlet with the corresponding route entry in the chain.\n * setRouteId will create or select the view in the outlet.\n */\nconst writeNavState = async (root, chain, direction, index, changed = false, animation) => {\n    try {\n        // find next navigation outlet in the DOM\n        const outlet = searchNavNode(root);\n        // make sure we can continue interacting the DOM, otherwise abort\n        if (index >= chain.length || !outlet) {\n            return changed;\n        }\n        await new Promise((resolve) => componentOnReady(outlet, resolve));\n        const route = chain[index];\n        const result = await outlet.setRouteId(route.id, route.params, direction, animation);\n        // if the outlet changed the page, reset navigation to neutral (no direction)\n        // this means nested outlets will not animate\n        if (result.changed) {\n            direction = ROUTER_INTENT_NONE;\n            changed = true;\n        }\n        // recursively set nested outlets\n        changed = await writeNavState(result.element, chain, direction, index + 1, changed, animation);\n        // once all nested outlets are visible let's make the parent visible too,\n        // using markVisible prevents flickering\n        if (result.markVisible) {\n            await result.markVisible();\n        }\n        return changed;\n    }\n    catch (e) {\n        console.error(e);\n        return false;\n    }\n};\n/**\n * Recursively walks the outlet in the DOM.\n *\n * The function returns a list of RouteID corresponding to each of the outlet and the last outlet without a RouteID.\n */\nconst readNavState = async (root) => {\n    const ids = [];\n    let outlet;\n    let node = root;\n    // eslint-disable-next-line no-cond-assign\n    while ((outlet = searchNavNode(node))) {\n        const id = await outlet.getRouteId();\n        if (id) {\n            node = id.element;\n            id.element = undefined;\n            ids.push(id);\n        }\n        else {\n            break;\n        }\n    }\n    return { ids, outlet };\n};\nconst waitUntilNavNode = () => {\n    if (searchNavNode(document.body)) {\n        return Promise.resolve();\n    }\n    return new Promise((resolve) => {\n        window.addEventListener('ionNavWillLoad', () => resolve(), { once: true });\n    });\n};\n/** Selector for all the outlets supported by the router. */\nconst OUTLET_SELECTOR = ':not([no-router]) ion-nav, :not([no-router]) ion-tabs, :not([no-router]) ion-router-outlet';\nconst searchNavNode = (root) => {\n    if (!root) {\n        return undefined;\n    }\n    if (root.matches(OUTLET_SELECTOR)) {\n        return root;\n    }\n    const outlet = root.querySelector(OUTLET_SELECTOR);\n    return outlet !== null && outlet !== void 0 ? outlet : undefined;\n};\n\n/**\n * Returns whether the given redirect matches the given path segments.\n *\n * A redirect matches when the segments of the path and redirect.from are equal.\n * Note that segments are only checked until redirect.from contains a '*' which matches any path segment.\n * The path ['some', 'path', 'to', 'page'] matches both ['some', 'path', 'to', 'page'] and ['some', 'path', '*'].\n */\nconst matchesRedirect = (segments, redirect) => {\n    const { from, to } = redirect;\n    if (to === undefined) {\n        return false;\n    }\n    if (from.length > segments.length) {\n        return false;\n    }\n    for (let i = 0; i < from.length; i++) {\n        const expected = from[i];\n        if (expected === '*') {\n            return true;\n        }\n        if (expected !== segments[i]) {\n            return false;\n        }\n    }\n    return from.length === segments.length;\n};\n/** Returns the first redirect matching the path segments or undefined when no match found. */\nconst findRouteRedirect = (segments, redirects) => {\n    return redirects.find((redirect) => matchesRedirect(segments, redirect));\n};\nconst matchesIDs = (ids, chain) => {\n    const len = Math.min(ids.length, chain.length);\n    let score = 0;\n    for (let i = 0; i < len; i++) {\n        const routeId = ids[i];\n        const routeChain = chain[i];\n        // Skip results where the route id does not match the chain at the same index\n        if (routeId.id.toLowerCase() !== routeChain.id) {\n            break;\n        }\n        if (routeId.params) {\n            const routeIdParams = Object.keys(routeId.params);\n            // Only compare routes with the chain that have the same number of parameters.\n            if (routeIdParams.length === routeChain.segments.length) {\n                // Maps the route's params into a path based on the path variable names,\n                // to compare against the route chain format.\n                //\n                // Before:\n                // ```ts\n                // {\n                //  params: {\n                //    s1: 'a',\n                //    s2: 'b'\n                //  }\n                // }\n                // ```\n                //\n                // After:\n                // ```ts\n                // [':s1',':s2']\n                // ```\n                //\n                const pathWithParams = routeIdParams.map((key) => `:${key}`);\n                for (let j = 0; j < pathWithParams.length; j++) {\n                    // Skip results where the path variable is not a match\n                    if (pathWithParams[j].toLowerCase() !== routeChain.segments[j]) {\n                        break;\n                    }\n                    // Weight path matches for the same index higher.\n                    score++;\n                }\n            }\n        }\n        // Weight id matches\n        score++;\n    }\n    return score;\n};\n/**\n * Matches the segments against the chain.\n *\n * Returns:\n * - null when there is no match,\n * - a chain with the params properties updated with the parameter segments on match.\n */\nconst matchesSegments = (segments, chain) => {\n    const inputSegments = new RouterSegments(segments);\n    let matchesDefault = false;\n    let allparams;\n    for (let i = 0; i < chain.length; i++) {\n        const chainSegments = chain[i].segments;\n        if (chainSegments[0] === '') {\n            matchesDefault = true;\n        }\n        else {\n            for (const segment of chainSegments) {\n                const data = inputSegments.next();\n                // data param\n                if (segment[0] === ':') {\n                    if (data === '') {\n                        return null;\n                    }\n                    allparams = allparams || [];\n                    const params = allparams[i] || (allparams[i] = {});\n                    params[segment.slice(1)] = data;\n                }\n                else if (data !== segment) {\n                    return null;\n                }\n            }\n            matchesDefault = false;\n        }\n    }\n    const matches = matchesDefault ? matchesDefault === (inputSegments.next() === '') : true;\n    if (!matches) {\n        return null;\n    }\n    if (allparams) {\n        return chain.map((route, i) => ({\n            id: route.id,\n            segments: route.segments,\n            params: mergeParams(route.params, allparams[i]),\n            beforeEnter: route.beforeEnter,\n            beforeLeave: route.beforeLeave,\n        }));\n    }\n    return chain;\n};\n/**\n * Merges the route parameter objects.\n * Returns undefined when both parameters are undefined.\n */\nconst mergeParams = (a, b) => {\n    return a || b ? Object.assign(Object.assign({}, a), b) : undefined;\n};\n/**\n * Finds the best match for the ids in the chains.\n *\n * Returns the best match or null when no match is found.\n * When a chain is returned the parameters are updated from the RouteIDs.\n * That is they contain both the componentProps of the <ion-route> and the parameter segment.\n */\nconst findChainForIDs = (ids, chains) => {\n    let match = null;\n    let maxMatches = 0;\n    for (const chain of chains) {\n        const score = matchesIDs(ids, chain);\n        if (score > maxMatches) {\n            match = chain;\n            maxMatches = score;\n        }\n    }\n    if (match) {\n        return match.map((route, i) => {\n            var _a;\n            return ({\n                id: route.id,\n                segments: route.segments,\n                params: mergeParams(route.params, (_a = ids[i]) === null || _a === void 0 ? void 0 : _a.params),\n            });\n        });\n    }\n    return null;\n};\n/**\n * Finds the best match for the segments in the chains.\n *\n * Returns the best match or null when no match is found.\n * When a chain is returned the parameters are updated from the segments.\n * That is they contain both the componentProps of the <ion-route> and the parameter segments.\n */\nconst findChainForSegments = (segments, chains) => {\n    let match = null;\n    let bestScore = 0;\n    for (const chain of chains) {\n        const matchedChain = matchesSegments(segments, chain);\n        if (matchedChain !== null) {\n            const score = computePriority(matchedChain);\n            if (score > bestScore) {\n                bestScore = score;\n                match = matchedChain;\n            }\n        }\n    }\n    return match;\n};\n/**\n * Computes the priority of a chain.\n *\n * Parameter segments are given a lower priority over fixed segments.\n *\n * Considering the following 2 chains matching the path /path/to/page:\n * - /path/to/:where\n * - /path/to/page\n *\n * The second one will be given a higher priority because \"page\" is a fixed segment (vs \":where\", a parameter segment).\n */\nconst computePriority = (chain) => {\n    let score = 1;\n    let level = 1;\n    for (const route of chain) {\n        for (const segment of route.segments) {\n            if (segment[0] === ':') {\n                score += Math.pow(1, level);\n            }\n            else if (segment !== '') {\n                score += Math.pow(2, level);\n            }\n            level++;\n        }\n    }\n    return score;\n};\nclass RouterSegments {\n    constructor(segments) {\n        this.segments = segments.slice();\n    }\n    next() {\n        if (this.segments.length > 0) {\n            return this.segments.shift();\n        }\n        return '';\n    }\n}\n\nconst readProp = (el, prop) => {\n    if (prop in el) {\n        return el[prop];\n    }\n    if (el.hasAttribute(prop)) {\n        return el.getAttribute(prop);\n    }\n    return null;\n};\n/**\n * Extracts the redirects (that is <ion-route-redirect> elements inside the root).\n *\n * The redirects are returned as a list of RouteRedirect.\n */\nconst readRedirects = (root) => {\n    return Array.from(root.children)\n        .filter((el) => el.tagName === 'ION-ROUTE-REDIRECT')\n        .map((el) => {\n        const to = readProp(el, 'to');\n        return {\n            from: parsePath(readProp(el, 'from')).segments,\n            to: to == null ? undefined : parsePath(to),\n        };\n    });\n};\n/**\n * Extracts all the routes (that is <ion-route> elements inside the root).\n *\n * The routes are returned as a list of chains - the flattened tree.\n */\nconst readRoutes = (root) => {\n    return flattenRouterTree(readRouteNodes(root));\n};\n/**\n * Reads the route nodes as a tree modeled after the DOM tree of <ion-route> elements.\n *\n * Note: routes without a component are ignored together with their children.\n */\nconst readRouteNodes = (node) => {\n    return Array.from(node.children)\n        .filter((el) => el.tagName === 'ION-ROUTE' && el.component)\n        .map((el) => {\n        const component = readProp(el, 'component');\n        return {\n            segments: parsePath(readProp(el, 'url')).segments,\n            id: component.toLowerCase(),\n            params: el.componentProps,\n            beforeLeave: el.beforeLeave,\n            beforeEnter: el.beforeEnter,\n            children: readRouteNodes(el),\n        };\n    });\n};\n/**\n * Flattens a RouterTree in a list of chains.\n *\n * Each chain represents a path from the root node to a terminal node.\n */\nconst flattenRouterTree = (nodes) => {\n    const chains = [];\n    for (const node of nodes) {\n        flattenNode([], chains, node);\n    }\n    return chains;\n};\n/** Flattens a route node recursively and push each branch to the chains list. */\nconst flattenNode = (chain, chains, node) => {\n    chain = [\n        ...chain,\n        {\n            id: node.id,\n            segments: node.segments,\n            params: node.params,\n            beforeLeave: node.beforeLeave,\n            beforeEnter: node.beforeEnter,\n        },\n    ];\n    if (node.children.length === 0) {\n        chains.push(chain);\n        return;\n    }\n    for (const child of node.children) {\n        flattenNode(chain, chains, child);\n    }\n};\n\nconst Router = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.ionRouteWillChange = createEvent(this, \"ionRouteWillChange\", 7);\n        this.ionRouteDidChange = createEvent(this, \"ionRouteDidChange\", 7);\n        this.previousPath = null;\n        this.busy = false;\n        this.state = 0;\n        this.lastState = 0;\n        this.root = '/';\n        this.useHash = true;\n    }\n    async componentWillLoad() {\n        await waitUntilNavNode();\n        const canProceed = await this.runGuards(this.getSegments());\n        if (canProceed !== true) {\n            if (typeof canProceed === 'object') {\n                const { redirect } = canProceed;\n                const path = parsePath(redirect);\n                this.setSegments(path.segments, ROUTER_INTENT_NONE, path.queryString);\n                await this.writeNavStateRoot(path.segments, ROUTER_INTENT_NONE);\n            }\n        }\n        else {\n            await this.onRoutesChanged();\n        }\n    }\n    componentDidLoad() {\n        window.addEventListener('ionRouteRedirectChanged', debounce(this.onRedirectChanged.bind(this), 10));\n        window.addEventListener('ionRouteDataChanged', debounce(this.onRoutesChanged.bind(this), 100));\n    }\n    async onPopState() {\n        const direction = this.historyDirection();\n        let segments = this.getSegments();\n        const canProceed = await this.runGuards(segments);\n        if (canProceed !== true) {\n            if (typeof canProceed === 'object') {\n                segments = parsePath(canProceed.redirect).segments;\n            }\n            else {\n                return false;\n            }\n        }\n        return this.writeNavStateRoot(segments, direction);\n    }\n    onBackButton(ev) {\n        ev.detail.register(0, (processNextHandler) => {\n            this.back();\n            processNextHandler();\n        });\n    }\n    /** @internal */\n    async canTransition() {\n        const canProceed = await this.runGuards();\n        if (canProceed !== true) {\n            if (typeof canProceed === 'object') {\n                return canProceed.redirect;\n            }\n            else {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Navigate to the specified path.\n     *\n     * @param path The path to navigate to.\n     * @param direction The direction of the animation. Defaults to `\"forward\"`.\n     */\n    async push(path, direction = 'forward', animation) {\n        var _a;\n        if (path.startsWith('.')) {\n            const currentPath = (_a = this.previousPath) !== null && _a !== void 0 ? _a : '/';\n            // Convert currentPath to an URL by pre-pending a protocol and a host to resolve the relative path.\n            const url = new URL(path, `https://host/${currentPath}`);\n            path = url.pathname + url.search;\n        }\n        let parsedPath = parsePath(path);\n        const canProceed = await this.runGuards(parsedPath.segments);\n        if (canProceed !== true) {\n            if (typeof canProceed === 'object') {\n                parsedPath = parsePath(canProceed.redirect);\n            }\n            else {\n                return false;\n            }\n        }\n        this.setSegments(parsedPath.segments, direction, parsedPath.queryString);\n        return this.writeNavStateRoot(parsedPath.segments, direction, animation);\n    }\n    /** Go back to previous page in the window.history. */\n    back() {\n        window.history.back();\n        return Promise.resolve(this.waitPromise);\n    }\n    /** @internal */\n    async printDebug() {\n        printRoutes(readRoutes(this.el));\n        printRedirects(readRedirects(this.el));\n    }\n    /** @internal */\n    async navChanged(direction) {\n        if (this.busy) {\n            console.warn('[ion-router] router is busy, navChanged was cancelled');\n            return false;\n        }\n        const { ids, outlet } = await readNavState(window.document.body);\n        const routes = readRoutes(this.el);\n        const chain = findChainForIDs(ids, routes);\n        if (!chain) {\n            console.warn('[ion-router] no matching URL for ', ids.map((i) => i.id));\n            return false;\n        }\n        const segments = chainToSegments(chain);\n        if (!segments) {\n            console.warn('[ion-router] router could not match path because some required param is missing');\n            return false;\n        }\n        this.setSegments(segments, direction);\n        await this.safeWriteNavState(outlet, chain, ROUTER_INTENT_NONE, segments, null, ids.length);\n        return true;\n    }\n    /** This handler gets called when a `ion-route-redirect` component is added to the DOM or if the from or to property of such node changes. */\n    onRedirectChanged() {\n        const segments = this.getSegments();\n        if (segments && findRouteRedirect(segments, readRedirects(this.el))) {\n            this.writeNavStateRoot(segments, ROUTER_INTENT_NONE);\n        }\n    }\n    /** This handler gets called when a `ion-route` component is added to the DOM or if the from or to property of such node changes. */\n    onRoutesChanged() {\n        return this.writeNavStateRoot(this.getSegments(), ROUTER_INTENT_NONE);\n    }\n    historyDirection() {\n        var _a;\n        const win = window;\n        if (win.history.state === null) {\n            this.state++;\n            win.history.replaceState(this.state, win.document.title, (_a = win.document.location) === null || _a === void 0 ? void 0 : _a.href);\n        }\n        const state = win.history.state;\n        const lastState = this.lastState;\n        this.lastState = state;\n        if (state > lastState || (state >= lastState && lastState > 0)) {\n            return ROUTER_INTENT_FORWARD;\n        }\n        if (state < lastState) {\n            return ROUTER_INTENT_BACK;\n        }\n        return ROUTER_INTENT_NONE;\n    }\n    async writeNavStateRoot(segments, direction, animation) {\n        if (!segments) {\n            console.error('[ion-router] URL is not part of the routing set');\n            return false;\n        }\n        // lookup redirect rule\n        const redirects = readRedirects(this.el);\n        const redirect = findRouteRedirect(segments, redirects);\n        let redirectFrom = null;\n        if (redirect) {\n            const { segments: toSegments, queryString } = redirect.to;\n            this.setSegments(toSegments, direction, queryString);\n            redirectFrom = redirect.from;\n            segments = toSegments;\n        }\n        // lookup route chain\n        const routes = readRoutes(this.el);\n        const chain = findChainForSegments(segments, routes);\n        if (!chain) {\n            console.error('[ion-router] the path does not match any route');\n            return false;\n        }\n        // write DOM give\n        return this.safeWriteNavState(document.body, chain, direction, segments, redirectFrom, 0, animation);\n    }\n    async safeWriteNavState(node, chain, direction, segments, redirectFrom, index = 0, animation) {\n        const unlock = await this.lock();\n        let changed = false;\n        try {\n            changed = await this.writeNavState(node, chain, direction, segments, redirectFrom, index, animation);\n        }\n        catch (e) {\n            console.error(e);\n        }\n        unlock();\n        return changed;\n    }\n    async lock() {\n        const p = this.waitPromise;\n        let resolve;\n        this.waitPromise = new Promise((r) => (resolve = r));\n        if (p !== undefined) {\n            await p;\n        }\n        return resolve;\n    }\n    /**\n     * Executes the beforeLeave hook of the source route and the beforeEnter hook of the target route if they exist.\n     *\n     * When the beforeLeave hook does not return true (to allow navigating) then that value is returned early and the beforeEnter is executed.\n     * Otherwise the beforeEnterHook hook of the target route is executed.\n     */\n    async runGuards(to = this.getSegments(), from) {\n        if (from === undefined) {\n            from = parsePath(this.previousPath).segments;\n        }\n        if (!to || !from) {\n            return true;\n        }\n        const routes = readRoutes(this.el);\n        const fromChain = findChainForSegments(from, routes);\n        // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n        const beforeLeaveHook = fromChain && fromChain[fromChain.length - 1].beforeLeave;\n        const canLeave = beforeLeaveHook ? await beforeLeaveHook() : true;\n        if (canLeave === false || typeof canLeave === 'object') {\n            return canLeave;\n        }\n        const toChain = findChainForSegments(to, routes);\n        // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n        const beforeEnterHook = toChain && toChain[toChain.length - 1].beforeEnter;\n        return beforeEnterHook ? beforeEnterHook() : true;\n    }\n    async writeNavState(node, chain, direction, segments, redirectFrom, index = 0, animation) {\n        if (this.busy) {\n            console.warn('[ion-router] router is busy, transition was cancelled');\n            return false;\n        }\n        this.busy = true;\n        // generate route event and emit will change\n        const routeEvent = this.routeChangeEvent(segments, redirectFrom);\n        if (routeEvent) {\n            this.ionRouteWillChange.emit(routeEvent);\n        }\n        const changed = await writeNavState(node, chain, direction, index, false, animation);\n        this.busy = false;\n        // emit did change\n        if (routeEvent) {\n            this.ionRouteDidChange.emit(routeEvent);\n        }\n        return changed;\n    }\n    setSegments(segments, direction, queryString) {\n        this.state++;\n        writeSegments(window.history, this.root, this.useHash, segments, direction, this.state, queryString);\n    }\n    getSegments() {\n        return readSegments(window.location, this.root, this.useHash);\n    }\n    routeChangeEvent(toSegments, redirectFromSegments) {\n        const from = this.previousPath;\n        const to = generatePath(toSegments);\n        this.previousPath = to;\n        if (to === from) {\n            return null;\n        }\n        const redirectedFrom = redirectFromSegments ? generatePath(redirectFromSegments) : null;\n        return {\n            from,\n            redirectedFrom,\n            to,\n        };\n    }\n    get el() { return getElement(this); }\n};\n\nconst routerLinkCss = \":host{--background:transparent;--color:var(--ion-color-primary, #0054e9);background:var(--background);color:var(--color)}:host(.ion-color){color:var(--ion-color-base)}a{font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-indent:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit}\";\nconst IonRouterLinkStyle0 = routerLinkCss;\n\nconst RouterLink = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.onClick = (ev) => {\n            openURL(this.href, ev, this.routerDirection, this.routerAnimation);\n        };\n        this.color = undefined;\n        this.href = undefined;\n        this.rel = undefined;\n        this.routerDirection = 'forward';\n        this.routerAnimation = undefined;\n        this.target = undefined;\n    }\n    render() {\n        const mode = getIonMode(this);\n        const attrs = {\n            href: this.href,\n            rel: this.rel,\n            target: this.target,\n        };\n        return (h(Host, { key: '529ceed5beaf92d7b4cc315c82f449eac18310e8', onClick: this.onClick, class: createColorClasses(this.color, {\n                [mode]: true,\n                'ion-activatable': true,\n            }) }, h(\"a\", Object.assign({ key: 'd5f1f8b256695d70bdafd20ff3d1b625963fa2da' }, attrs), h(\"slot\", { key: '613fcdb36a71e076f989551ea21f1d5c118b1cd2' }))));\n    }\n};\nRouterLink.style = IonRouterLinkStyle0;\n\nexport { Route as ion_route, RouteRedirect as ion_route_redirect, Router as ion_router, RouterLink as ion_router_link };\n","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nconst hostContext = (selector, el) => {\n    return el.closest(selector) !== null;\n};\n/**\n * Create the mode and color classes for the component based on the classes passed in\n */\nconst createColorClasses = (color, cssClassMap) => {\n    return typeof color === 'string' && color.length > 0\n        ? Object.assign({ 'ion-color': true, [`ion-color-${color}`]: true }, cssClassMap) : cssClassMap;\n};\nconst getClassList = (classes) => {\n    if (classes !== undefined) {\n        const array = Array.isArray(classes) ? classes : classes.split(' ');\n        return array\n            .filter((c) => c != null)\n            .map((c) => c.trim())\n            .filter((c) => c !== '');\n    }\n    return [];\n};\nconst getClassMap = (classes) => {\n    const map = {};\n    getClassList(classes).forEach((c) => (map[c] = true));\n    return map;\n};\nconst SCHEME = /^[a-z][a-z0-9+\\-.]*:/;\nconst openURL = async (url, ev, direction, animation) => {\n    if (url != null && url[0] !== '#' && !SCHEME.test(url)) {\n        const router = document.querySelector('ion-router');\n        if (router) {\n            if (ev != null) {\n                ev.preventDefault();\n            }\n            return router.push(url, direction, animation);\n        }\n    }\n    return false;\n};\n\nexport { createColorClasses as c, getClassMap as g, hostContext as h, openURL as o };\n"],"x_google_ignoreList":[0,1]}